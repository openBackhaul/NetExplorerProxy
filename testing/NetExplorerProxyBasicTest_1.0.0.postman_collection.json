{
	"info": {
		"_postman_id": "1440267c-f933-40b9-ac9f-669ca745fa3e",
		"name": "NetExplorerProxyBasicTest_1.0.0",
		"description": "**Content:**\n\nThis collection provides basic testcases for the individual NetExplorerProxy.\n\n- Version under test: NEP v1.0.0\n    \n- dependencies: MATR, MWDI - or corresponding mock servers\n    \n\n---\n\n**Tested services:**\n\n- /v1/provide-list-of-connected-devices\n    \n- /v1/provide-mac-table-of-all-devices\n    \n- /v1/provide-mac-table-of-specific-device\n    \n- /v1/read-current-mac-table-from-device\n    \n- /v1/receive-current-mac-table-of-device\n    \n\n---\n\n**Test scope:**\n\n- The testcases include tests for:\n    \n    - responseBody completeness and validity against the specified schema\n        \n    - correct error responses in case of invalid requestBodies or unknown devices\n        \n- Out-of-scope (to be covered by additional collections):\n    \n    - basic services, management, integration with TAC\n        \n    - performance\n        \n    - ...\n        \n\n---\n\n**Note:**\n\nTests are done for MAC address table services, which rely on MATR services with the same name, but the testcase collection cannot be run for MATR services, as there are some differences:\n\n- partially different input between NEP service and MATR counterpart\n    \n- translation of MATR error responseCodes into other responseCodes in NEP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9698906",
		"_collection_link": "https://kat123456.postman.co/workspace/MWDI-Testing-convenience-servic~b5e959b8-22a6-483d-9eba-1cdd51e28c66/collection/9698906-1440267c-f933-40b9-ac9f-669ca745fa3e?action=share&source=collection_link&creator=9698906"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"\\n\\n\\n===========================================================================================\");\r",
									"logger.struc(\"====================================== NetExplorerProxy 1.0.0 ====================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"// ------------------------------- PURPOSE -------------------------------------------------------------------------------- //\r",
									"// This script loads data from the input loadFile/dataFile into Postman environment variables.\r",
									"//\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"\r",
									"try {\r",
									"    var inputFromFile;\r",
									"    inputFromFile = data;\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    // ==== LOG MODE =====================================================================================\r",
									"        // Mode to be applied while running this testcase collection \r",
									"        //  - \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"        //  - \"testing\" -> automated approval based on binary result\r",
									"        //  - \"debugging\" -> support for programming the testcase collection    \r",
									"        let mode = inputFromFile.mode;\r",
									"\r",
									"        // Level of detail of the logging; find more info in pre-request script on the collection's level   \r",
									"        let logLevel;\r",
									"        switch(mode) {\r",
									"            case \"debugging\":\r",
									"                logLevel = \"debug\";\r",
									"                break;\r",
									"            case \"analysis\":\r",
									"                logLevel = \"log\";\r",
									"                break;\r",
									"            case \"testing\":\r",
									"                logLevel = \"error\";\r",
									"                break;\r",
									"            default:\r",
									"                logLevel = \"debug\";\r",
									"        };\r",
									"\r",
									"    // ==== TARGET COLLECTION NAME =================================================================================\r",
									"        // collectionName is filled from the targetCollectionName and must match one of the collectionInputList.collectionName values from the dataFile.\r",
									"        // depending on the collectionName, the mainServerName (=serverToBeApplied) and its associated address information from the serverList is loaded into the environment variables.\r",
									"        // some testcases are can to run against the MATR; the related test requests contain a differentiation based on serverToBeApplied. \r",
									"\r",
									"        let collectionName = inputFromFile.targetCollectionName;\r",
									"\r",
									"    // ==== SERVER INFORMATION =====================================================================================\r",
									"        // list of addresses of applications, controllers etc.\r",
									"        // serverName : key attribute for identifying the servers\r",
									"        // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"        // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"        // [NOT USED HERE]: pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"        // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"        // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"        // userName : user header to be sent in case of addressing a MW SDN application\r",
									"        // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"        // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"        // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"        // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"        let serverList = [];\r",
									"        serverList = inputFromFile.serverList;\r",
									"\r",
									"\r",
									"    // ==== COLLECTION INPUT LIST ==================================================================================    \r",
									"        // list of inputs to individual test case collections\r",
									"        // collectionName: the name of the target collection (compared against the collectionName defined in this load request!)\r",
									"        // serverToBeApplied : server that shall be addressed in the respective request/test case        \r",
									"        // serviceInputParameters: a set of input parameters per service\r",
									"        //      - serviceUnderTest: the name of the service to be tested\r",
									"        //      - parameters: a set of parameters required for testing this service specifically\r",
									"        let collectionInputList = [];\r",
									"        collectionInputList = inputFromFile.collectionInputList;\r",
									"\r",
									"    // ==== EXTRACT RELEVANT INFORMATION FROM COLLECTION INPUT LIST ================================================\r",
									"        // find the relevant collection record in the collectionInputList\r",
									"        let relevantCollectionRecord = ExtractCollectionRecordFromCollectionInputList(collectionName, collectionInputList);\r",
									"\r",
									"        // from that record get the mainServerName\r",
									"        // - this is the name of the server against which the testcase collection is run,\r",
									"        // - filled from the serverToBeApplied attribute\r",
									"        let mainServerName = relevantCollectionRecord[\"serverToBeApplied\"];\r",
									"\r",
									"        // also extract the serviceInputParameters, these will be relevant for the tests (we don't need the complete collectionInputList)\r",
									"        let serviceInputParameters = relevantCollectionRecord[\"serviceInputParameters\"];\r",
									"\r",
									"\r",
									"    // ==== GET THE DUMMYURI FROM THE DUMMY SERVER =================================================================\r",
									"        let serverInfo = ExtractServerInformation(serverList, \"dummy\");\r",
									"        var dummyUri = serverInfo[\"dummyUri\"];\r",
									"\r",
									"\r",
									"    // ===== SET THE ENVIRONMENT VARIABLES =========================================================================\r",
									"        pm.environment.set(\"mode\", mode);\r",
									"        pm.environment.set(\"logLevel\", logLevel);\r",
									"        pm.environment.set(\"serverList\", serverList);\r",
									"        pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"        pm.environment.set(\"serverToBeApplied\", mainServerName);\r",
									"\r",
									"        pm.environment.set(\"serviceInputParameters\", serviceInputParameters);\r",
									"        pm.environment.set(\"collectionName\", collectionName);\r",
									"        pm.environment.set(\"dummyUri\", dummyUri);\r",
									"        writeMainServerInfoToEnv(serverList, mainServerName);           // set the default server connection info for the mainServerName\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Collection variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"\r",
									"try {\r",
									"    //call the apps inform-about-application service\r",
									"    let uri = dummyUri;\r",
									"\r",
									"    let requestBody;\r",
									"    requestBody = '{}';\r",
									"\r",
									"    pm.variables.clear();\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(error);\r",
									"    logger.debug(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									"function ExtractCollectionRecordFromCollectionInputList(searchedCollectionName, collectionInputList){\r",
									"    let collectionRecord;\r",
									"    try {\r",
									"        for(let i=0; i<collectionInputList.length; i++) {\r",
									"            if(collectionInputList[i].collectionName==searchedCollectionName) {\r",
									"                collectionRecord = collectionInputList[i];\r",
									"                return collectionRecord;\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! collectionInputList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.debug(\"Matching collection record could not be found.\");\r",
									"    return {}\r",
									"\r",
									"}\r",
									"\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.debug(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									"\r",
									"function writeMainServerInfoToEnv(serverList, serverName){\r",
									"    let serverInfo = ExtractServerInformation(serverList, serverName);\r",
									"\r",
									"    let serverUrl = serverInfo[\"server\"];\r",
									"    let authorizationCode = serverInfo[\"authorizationCode\"];\r",
									"    let operationKey = serverInfo[\"operationKey\"];\r",
									"    let userName = serverInfo[\"userName\"];\r",
									"    let originator = serverInfo[\"originator\"];\r",
									"    let xCorrelator = serverInfo[\"xCorrelator\"];\r",
									"    let traceIndicator = serverInfo[\"traceIndicator\"];\r",
									"    let customerJourney = serverInfo[\"customerJourney\"];\r",
									"\r",
									"    //write to them to postman environment variables\r",
									"    pm.environment.set(\"serverUrl\", serverUrl);\r",
									"    pm.environment.set(\"authorizationCode\", authorizationCode);\r",
									"    pm.environment.set(\"operationKey\", operationKey);    \r",
									"    pm.environment.set(\"userName\", userName);\r",
									"    pm.environment.set(\"originator\", originator);\r",
									"    pm.environment.set(\"xCorrelator\", xCorrelator);\r",
									"    pm.environment.set(\"traceIndicator\", traceIndicator);\r",
									"    pm.environment.set(\"customerJourney\", customerJourney);\r",
									"\r",
									"    //console.debug(JSON.stringify(serverInfo, null, 2,2));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"console.debug(pm.environment.get(\"mode\"));\r",
									"console.debug(pm.environment.get(\"logLevel\"));\r",
									"console.debug(pm.environment.get(\"serverList\"));\r",
									"console.debug(pm.environment.get(\"collectionInputList\"));\r",
									"console.debug(pm.environment.get(\"serverToBeApplied\"));\r",
									"\r",
									"console.debug(pm.environment.get(\"serviceInputParameters\"));\r",
									"\r",
									"console.debug(pm.environment.get(\"dummyUri\"));\r",
									"\r",
									"//mainServerUnderTest address/request info\r",
									"console.debug(pm.environment.get(\"serverUrl\"));\r",
									"console.debug(pm.environment.get(\"authorizationCode\"));\r",
									"console.debug(pm.environment.get(\"operationKey\"));\r",
									"console.debug(pm.environment.get(\"userName\"));\r",
									"console.debug(pm.environment.get(\"originator\"));\r",
									"console.debug(pm.environment.get(\"xCorrelator\"));\r",
									"console.debug(pm.environment.get(\"traceIndicator\"));\r",
									"console.debug(pm.environment.get(\"customerJourney\"));\r",
									"*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utils",
			"item": [
				{
					"name": "for loading ltpList and fcList from reference control-construct to environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"console.debug(\"[Prep] Read ltpList and fcList from dataFile and store in environment for later usage ...\");\r",
									"/* read the ltpList and store it in environment for later usage.\r",
									"   Used fields:\r",
									"     - operationKey: the operationKey from loadFile can only be used in certain test locations, therefore read it from dataFile instead \r",
									"     - life-cycle-state: e.g. used for life-cycle-state propagated testcases\r",
									"   Other fields may be used later, therefore store them all\r",
									"\r",
									"   In larger collections the operationKeys may change during execution, therefore reading them just once might not suffice,\r",
									"   but for smaller testcase collections this problem is less likely to occur\r",
									"*/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"try {\r",
									"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
									"    var userName = pm.environment.get(\"userName\");\r",
									"    var originator = pm.environment.get(\"originator\");\r",
									"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
									"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
									"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
									"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be loaded.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"\r",
									"    let URI = serverUrl + \"/core-model-1-4:control-construct\";\r",
									"\r",
									"    let accept = \"application/json\";\r",
									"    let contentType = \"application/json\";\r",
									"    let operationKey = \"\";\r",
									"    let requestBody = \"\";\r",
									"\r",
									"    pm.variables.clear();\r",
									"    \r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.variables.set(\"requestBody\", requestBody);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: authorizationCode});\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: accept});\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: contentType});\r",
									"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
									"\r",
									"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
									"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
									"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
									"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
									"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
									"\r",
									"} catch (error) {\r",
									"    //logger.debug(error);\r",
									"    logger.debug(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result - Output/Write ltpList to pm.environment\r",
									"****************************************************************************************/\r",
									"var ltpList;\r",
									"var fcList;\r",
									"try {\r",
									"    let response;\r",
									"    response = pm.response;\r",
									"    \r",
									"    let responseCode;\r",
									"    responseCode = parseInt(response.code);\r",
									"    \r",
									"    if ( Math.floor(responseCode/100) === 2 ) {\r",
									"        let responseObject;\r",
									"        responseObject = JSON.parse(response.stream);\r",
									"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
									"\r",
									"    } else {\r",
									"        ltpList = [];\r",
									"        fcList = [];\r",
									"    }\r",
									"    pm.environment.set('ltpList', ltpList);\r",
									"    pm.environment.set('fcList', fcList);\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! ltpList/fcList could not be extracted and stored in environment.\");\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "NEP only",
					"item": [
						{
							"name": "authentication - unauthorized response (401)",
							"item": [
								{
									"name": "Expected /v1/provide-list-of-connected-devices - invalid authentication response",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var operationName = \"/v1/provide-list-of-connected-devices\";\r",
													"pm.environment.set(operationName, \"operationName\");\r",
													"\r",
													"logger.struc(\"\\n----- \" + operationName + \" acceptance -- invalid authentication rejection -------------------------------\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"try {\r",
													"    // load parameters from loadFile\r",
													"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
													"    var userName = pm.environment.get(\"userName\");\r",
													"    var originator = pm.environment.get(\"originator\");\r",
													"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
													"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
													"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
													"\r",
													"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
													"\r",
													"    // load from collection Vars\r",
													"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
													"\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    let URI = serverUrl + operationName;\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"\r",
													"\r",
													"    /* required authentication depends on target app/server:\r",
													"       - if (serverToBeApplied == \"nep\"): authorizationCode required\r",
													"       - else if (serverToBeApplied == \"matr\"): operationKey is required\r",
													"       but: it is omitted anyways, so we don't need to differentiate here, \r",
													"       both servers should return the same response (401)\r",
													"    */\r",
													"\r",
													"    //pm.request.headers.upsert({key:\"operation-key\", value: operationKey}); -- omitted\r",
													"    //pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode}); -- omitted\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
													"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
													"\r",
													"} catch (error) {\r",
													"    //logger.error(error);\r",
													"    logger.error(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var operationName = pm.environment.get(\"operationName\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining reference values\r",
													"****************************************************************************************/\r",
													"\r",
													"// if no valid authentication is provided, server shall return 401 - unauthorized\r",
													"let expectedResponseCode = 401;\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
													"} catch (error){\r",
													"    console.error(\"! Could not read serverToBeApplied.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"\r",
													"var responseCode;\r",
													"var responseMessage;\r",
													"try {\r",
													"    let response = pm.response;\r",
													"    let responseObject;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        responseMessage = responseObject.message;\r",
													"\r",
													"    } else {\r",
													"        responseMessage = {};\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"} \r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"\r",
													"//service not available in MATR\r",
													"if ((serverToBeApplied == \"nep\")){\r",
													"\r",
													"// now do actual testing\r",
													"    try {\r",
													"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
													"\r",
													"        pm.test(assertionName, function(){\r",
													"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
													"        });\r",
													"\r",
													"\r",
													"    } catch (error) {\r",
													"        logger.error(\"! Testing could not be executed.\")\r",
													"    }\r",
													"} else {\r",
													"    logger.debug(\"no test to be carried out, test for this service not applicable for serverToBeApplied=\" + serverToBeApplied);\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/receive-current-mac-table-of-device - invalid authentication response",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var operationName = \"/v1/receive-current-mac-table-of-device\";\r",
													"pm.environment.set(operationName, \"operationName\");\r",
													"\r",
													"logger.struc(\"\\n----- \" + operationName + \" acceptance -- invalid authentication rejection -------------------------------\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
													"} catch (error){\r",
													"    console.error(\"! Could not read serverToBeApplied.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"try {\r",
													"    // load parameters from loadFile\r",
													"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
													"    var userName = pm.environment.get(\"userName\");\r",
													"    var originator = pm.environment.get(\"originator\");\r",
													"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
													"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
													"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
													"\r",
													"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
													"\r",
													"    // load from collection Vars\r",
													"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
													"\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    let URI = serverUrl + operationName;\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"\r",
													"\r",
													"    //pm.request.headers.upsert({key:\"operation-key\", value: operationKey}); - not required\r",
													"    //pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode}); - omitted! -> authentication should fail\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
													"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
													"\r",
													"} catch (error) {\r",
													"    //logger.error(error);\r",
													"    logger.error(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var operationName = pm.environment.get(\"operationName\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining reference values\r",
													"****************************************************************************************/\r",
													"\r",
													"// if no valid authentication is provided, server shall return 401 - unauthorized\r",
													"let expectedResponseCode = 401;\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
													"} catch (error){\r",
													"    console.error(\"! Could not read serverToBeApplied.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"\r",
													"var responseCode;\r",
													"var responseMessage;\r",
													"try {\r",
													"    let response = pm.response;\r",
													"    let responseObject;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        responseMessage = responseObject.message;\r",
													"\r",
													"    } else {\r",
													"        responseMessage = {};\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"} \r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"\r",
													"if (serverToBeApplied == \"nep\"){\r",
													"\r",
													"// now do actual testing\r",
													"    try {\r",
													"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
													"\r",
													"        pm.test(assertionName, function(){\r",
													"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
													"        });\r",
													"\r",
													"\r",
													"    } catch (error) {\r",
													"        logger.error(\"! Testing could not be executed.\")\r",
													"    }\r",
													"} else {\r",
													"    logger.debug(\"no test to be carried out, test for this service not applicable for serverToBeApplied=\" + serverToBeApplied);\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Checks whether the App responds correctly (401 - unauthorized), if the services are not called with the required authentication method and token.\n\n- services called by Netexplorer: use basicAuth (user/password) provided as authorizationCode\n    \n- services called at MATR: use operationKey\n    \n- the testcases in this subfolder just check if a request without proper authentication is rejected with a 401, unauthorized\n    \n    - the positive case - i.e. when the correct authentication is provided, is checked implicitly during execution of the other testcases (e.g. responseBody completeness); they all would fail if the wrong authentication method/token would be provided.\n        \n    - for the tests all services are called without both operationKey and authorizationCode, so it does not matter against which target App/server the requests are run, but for the evaluation of test results a switch is included, so that non-matr services are not tested against MATR\n        \n\n---\n\n**When testcase collection is run to test NEP:**\n\n- test services for basicAuth (authorization header), which are called from outside SDN\n    \n    - /v1/provide-list-of-connected-devices\n        \n    - /v1/provide-mac-table-of-all-devices\n        \n    - /v1/provide-mac-table-of-specific-device\n        \n    - /v1/read-current-mac-table-from-device\n        \n- test service with operationKey instead, which are NOT called from outside SDN\n    \n    - /v1/receive-current-mac-table-of-device\n        \n\n---\n\n**When testcase collection is run to test MATR:**\n\n- test services with operationKey (from MATR CC):\n    \n    - /v1/provide-mac-table-of-all-devices\n        \n    - /v1/provide-mac-table-of-specific-device\n        \n    - /v1/read-current-mac-table-from-device"
						},
						{
							"name": "/v1/provide-list-of-connected-devices",
							"item": [
								{
									"name": "Prep",
									"item": [
										{
											"name": "for setting currentOperationServer info and responseSchema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/provide-list-of-connected-devices\";\r",
															"pm.environment.set(\"operationName\", operationName);\r",
															"\r",
															"console.debug(\"[Prep] Write ltpList information (operationKey, lifeCycleState, operationServerUuid) to collection variables for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.debug(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collection variables\r",
															"****************************************************************************************/\r",
															"\r",
															"    //define the responseSchema\r",
															"    let responseSchema = {\r",
															"        \"type\" : \"object\",\r",
															"        \"required\": [\r",
															"            \"mount-name-list\"\r",
															"        ],\r",
															"        \"properties\": {\r",
															"            \"mount-name-list\": {\r",
															"                \"type\": \"array\",\r",
															"                \"items\": {\r",
															"                    \"type\": \"string\"\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"// ----- now set the responseSchema (e.g. used in responseBody completeness test) ----------------\r",
															"try {\r",
															"\r",
															"    // set currentOperationServer info (operationKey, serverUuid, lifeCycleState)\r",
															"    setCurrentOpServerCollectionVars(operationName);\r",
															"\r",
															"    // set the responseSchema\r",
															"    pm.collectionVariables.set(\"responseSchema\", responseSchema);\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Collection variables (responseSchema) could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let REQUEST_BODY = \"\";\r",
															"\r",
															"    let authorization = pm.environment.get(\"authorizationCode\");\r",
															"    let accept = \"application/json\";\r",
															"    let contentType = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorization});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value: accept});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value: contentType});\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName) {\r",
															"    let ltpList = pm.environment.get('ltpList');\r",
															"\r",
															"    let operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Exception in function : FindOperationServer.\");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function setCurrentOpServerCollectionVars(operationName){\r",
															"\r",
															"    // Find the currentOperationServer from the ltpList for the operationName\r",
															"    // and write info to the environment for subsequent requests\r",
															"    // - lifeCycleState\r",
															"    // - operationServerUuid\r",
															"    // - operationKey\r",
															"    try {\r",
															"\r",
															"        let currentOperationServer = FindOperationServer(operationName);\r",
															"        let operationServerUuid = currentOperationServer[\"uuid\"];\r",
															"        let lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
															"        let operationKey = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"        pm.collectionVariables.set(\"operationServerUuid\", operationServerUuid);\r",
															"        pm.collectionVariables.set(\"lifeCycleState\", lifeCycleState);\r",
															"        pm.collectionVariables.set(\"operationKey\", operationKey);\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Collection variables (currentOperationServer info) could not be set.\");\r",
															"    }\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"console.info(pm.collectionVariables.get(\"operationServerUuid\"));\r",
															"console.info(pm.collectionVariables.get(\"lifeCycleState\"));\r",
															"console.info(pm.collectionVariables.get(\"operationKey\"));\r",
															"\r",
															"logger.debug(pm.collectionVariables.get(\"responseSchema\"));\r",
															"*/"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "ResponseBody completeness - 200",
											"item": [
												{
													"name": "Expected /v1/provide-list-of-connected-devices - responseBody completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Response body completeness -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from collection Vars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    //logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var reference;      // get the reference responseSchema\r",
																	"try {\r",
																	"\r",
																	"    reference = pm.collectionVariables.get(\"responseSchema\");\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
																	"\r",
																	"} catch(error){\r",
																	"    logger.error(\"! Input data could not be loaded.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseObject = {};\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"\r",
																	"    } else {\r",
																	"        responseObject = {}\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"if (serverToBeApplied == \"nep\"){\r",
																	"    // now do actual testing\r",
																	"    try {\r",
																	"\r",
																	"        let assertionName;\r",
																	"        let result;\r",
																	"        let failureReason;\r",
																	"\r",
																	"\r",
																	"        if (Math.floor(responseCode/100)===2) {\r",
																	"            let validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
																	"\r",
																	"            logger.log(\"Reference Schema:\");\r",
																	"            logger.log(reference);\r",
																	"\r",
																	"            logger.log(\"Response:\");\r",
																	"            logger.log(responseObject);\r",
																	"\r",
																	"            logger.log(\"Validation Result:\");\r",
																	"            logger.log(validationResult);\r",
																	"\r",
																	"            pm.test(\"Response matches schema definition\", function () {\r",
																	"                pm.expect(validationResult.errors.length).to.equal(0)\r",
																	"            });\r",
																	"\r",
																	"        } else {\r",
																	"            logger.warn(\"Response could not be loaded.\");\r",
																	"            pm.test(\"Response could be loaded\", function () {\r",
																	"                pm.expect(false).to.be.true\r",
																	"            })\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        logger.error(\"! validation could not be completely executed.\")\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "- checks whether /v1/provide-list-of-connected-devices returns the expected response (200, valid response schema)\n    \n- can also be run against MWDI"
						},
						{
							"name": "/v1/receive-current-mac-table-of-device",
							"item": [
								{
									"name": "Prep",
									"item": [
										{
											"name": "for setting currentOperationServer info",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/receive-current-mac-table-of-device\";\r",
															"pm.environment.set(\"operationName\", operationName);\r",
															"\r",
															"console.debug(\"[Prep] Write ltpList information (operationKey, lifeCycleState, operationServerUuid) to collection variables for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collection variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"// ----- now set the responseSchema (e.g. used in responseBody completeness test) ----------------\r",
															"try {\r",
															"\r",
															"    // set currentOperationServer info (operationKey, serverUuid, lifeCycleState)\r",
															"    setCurrentOpServerCollectionVars(operationName);\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let REQUEST_BODY = \"\";\r",
															"\r",
															"    let authorization = pm.environment.get(\"authorizationCode\");\r",
															"    let accept = \"application/json\";\r",
															"    let contentType = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorization});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value: accept});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value: contentType});\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName) {\r",
															"    let ltpList = pm.environment.get('ltpList');\r",
															"\r",
															"    let operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Exception in function : FindOperationServer.\");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function setCurrentOpServerCollectionVars(operationName){\r",
															"\r",
															"    // Find the currentOperationServer from the ltpList for the operationName\r",
															"    // and write info to the environment for subsequent requests\r",
															"    // - lifeCycleState\r",
															"    // - operationServerUuid\r",
															"    // - operationKey\r",
															"    try {\r",
															"\r",
															"        let currentOperationServer = FindOperationServer(operationName);\r",
															"        let operationServerUuid = currentOperationServer[\"uuid\"];\r",
															"        let lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
															"        let operationKey = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"        pm.collectionVariables.set(\"operationServerUuid\", operationServerUuid);\r",
															"        pm.collectionVariables.set(\"lifeCycleState\", lifeCycleState);\r",
															"        pm.collectionVariables.set(\"operationKey\", operationKey);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Collection variables (currentOperationServer info) could not be set.\");\r",
															"    }\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"operationServerUuid\"));\r",
															"logger.debug(pm.collectionVariables.get(\"lifeCycleState\"));\r",
															"logger.debug(pm.collectionVariables.get(\"operationKey\"));\r",
															"*/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "for setting additional operationServer info",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/read-current-mac-table-from-device\";\r",
															"\r",
															"console.debug(\"[Prep] Write ltpList information (operationKey, lifeCycleState, operationServerUuid) to collection variables for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collection variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"// ----- now set the responseSchema (e.g. used in responseBody completeness test) ----------------\r",
															"try {\r",
															"\r",
															"    // set currentOperationServer info (operationKey, serverUuid, lifeCycleState)\r",
															"    setCurrentOpServerCollectionVars(operationName);\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Collection variables could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let REQUEST_BODY = \"\";\r",
															"\r",
															"    let authorization = pm.environment.get(\"authorizationCode\");\r",
															"    let accept = \"application/json\";\r",
															"    let contentType = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorization});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value: accept});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value: contentType});\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName) {\r",
															"    let ltpList = pm.environment.get('ltpList');\r",
															"\r",
															"    let operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Exception in function : FindOperationServer.\");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function setCurrentOpServerCollectionVars(operationName){\r",
															"\r",
															"    // Find the currentOperationServer from the ltpList for the operationName\r",
															"    // and write info to the environment for subsequent requests\r",
															"    // - lifeCycleState\r",
															"    // - operationServerUuid\r",
															"    // - operationKey\r",
															"    try {\r",
															"\r",
															"        let currentOperationServer = FindOperationServer(operationName);\r",
															"        let operationServerUuid = currentOperationServer[\"uuid\"];\r",
															"        let lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
															"        let operationKey = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"        pm.collectionVariables.set(\"readOperationServerUuid\", operationServerUuid);\r",
															"        pm.collectionVariables.set(\"readLifeCycleState\", lifeCycleState);\r",
															"        pm.collectionVariables.set(\"readOperationKey\", operationKey);\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Collection variables (additionalOperationServer info) could not be set.\");\r",
															"    }\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"readOperationServerUuid\"));\r",
															"logger.debug(pm.collectionVariables.get(\"readLifeCycleState\"));\r",
															"logger.debug(pm.collectionVariables.get(\"readOperationKey\"));\r",
															"*/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get config: parameters from userInput",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"console.debug(\"[Config] read parameters from loadFile for \" + operationName);\r",
															"\r",
															"// Info: these parameters are used as input for the dependency operation call /v1/read-current-mac-table-from-device\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"    var serviceInputParameters;\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"        serviceInputParameters = pm.environment.get(\"serviceInputParameters\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting default values\r",
															"****************************************************************************************/\r",
															"\r",
															"    var dummyMountName = \"305251234\";\r",
															"    var requestorProtocol = \"HTTP\";\r",
															"    var requestorAddress = \"1.1.1.1\";\r",
															"    var requestorPort = \"1234\";\r",
															"    var requestorReceiveOperation = \"/receive-current-mac-table-of-device\"; \r",
															"\r",
															"/****************************************************************************************\r",
															"* Read config values from loadFile data\r",
															"****************************************************************************************/\r",
															"\r",
															"    try {\r",
															"        let parameters = FindServiceUnderTestParameters(operationName);\r",
															"\r",
															"        if (parameters != undefined){ // if omitted, default values are used\r",
															"            dummyMountName = parameters[\"mountName\"]; \r",
															"            requestorProtocol = parameters[\"requestorProtocol\"];\r",
															"            requestorAddress = parameters[\"requestorAddress\"];\r",
															"            requestorPort = parameters[\"requestorPort\"];\r",
															"            requestorReceiveOperation = parameters[\"requestorReceiveOperation\"];\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Local variables could not be set.\");\r",
															"    }\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collectionVariables\r",
															"****************************************************************************************/\r",
															"\r",
															"    pm.collectionVariables.set(\"dummyMountName\", dummyMountName);\r",
															"    pm.collectionVariables.set(\"requestorProtocol\", requestorProtocol);\r",
															"    pm.collectionVariables.set(\"requestorAddress\", requestorAddress);\r",
															"    pm.collectionVariables.set(\"requestorPort\", requestorPort);\r",
															"    pm.collectionVariables.set(\"requestorReceiveOperation\", requestorReceiveOperation);\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"\r",
															"    let requestBody = '{}';\r",
															"\r",
															"    let authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"    let operationKey = pm.environment.get(\"operationKey\");\r",
															"    let userName = pm.environment.get(\"userName\");\r",
															"    let originator = pm.environment.get(\"originator\");\r",
															"    let xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    let traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    let customerJourney =  pm.environment.get(\"customerJourney\");\r",
															"    \r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"    \r",
															"    pm.request.headers.upsert({ key: \"Authorization\", value: authorizationCode });\r",
															"    pm.request.headers.upsert({ key: \"operation-key\", value: operationKey });\r",
															"    pm.request.headers.upsert({ key: \"user\", value: userName });\r",
															"    pm.request.headers.upsert({ key: \"originator\", value: originator });\r",
															"    pm.request.headers.upsert({ key: \"x-correlator\", value: xCorrelator });\r",
															"    pm.request.headers.upsert({ key: \"trace-indicator\", value: traceIndicator });\r",
															"    pm.request.headers.upsert({ key: \"customer-journey\", value: customerJourney });\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindServiceUnderTestParameters(operationName){\r",
															"    let serviceUnderTest;\r",
															"    let parameters;\r",
															"    try{\r",
															"        for (let i=0; i<serviceInputParameters.length; i++){\r",
															"            serviceUnderTest = serviceInputParameters[i][\"serviceUnderTest\"];\r",
															"            if (serviceUnderTest == operationName){\r",
															"                parameters = serviceInputParameters[i][\"parameters\"];\r",
															"                break;\r",
															"            }\r",
															"        } \r",
															"    }\r",
															"     catch (error) {\r",
															"        logger.error(\"! Cannot find service testing parameters\");\r",
															"    }\r",
															"    return parameters;\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"dummyMountName\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorProtocol\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorAddress\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorPort\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorReceiveOperation\"));\r",
															"*/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid requestBody response - 204",
									"item": [
										{
											"name": "/v1/read-current-mac-table-from-device - write requestId to NEP lookup table (dependency)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//var operationName = pm.environment.get(\"operationName\");\r",
															"var operationName = \"/v1/read-current-mac-table-from-device\";\r",
															"let testedOperationName = \"/v1/receive-current-mac-table-of-device\";\r",
															"\r",
															"logger.struc(\"\\n----- \" + testedOperationName + \" acceptance -- Valid requestBody response -------------------------------\");\r",
															"\r",
															"logger.debug(\"[Prerequisite] Execute \" + operationName + \" to write valid requestId to NEP lookup table\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    // load parameters from loadFile\r",
															"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
															"    var userName = pm.environment.get(\"userName\");\r",
															"    var originator = pm.environment.get(\"originator\");\r",
															"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
															"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"\r",
															"    // load from connectionVars\r",
															"    var operationKey = pm.collectionVariables.get(\"readOperationKey\");\r",
															"\r",
															"    // read from loadFile\r",
															"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
															"\r",
															"    // this will be the Netexplorer address info in real usage scenario\r",
															"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
															"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
															"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
															"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"var requestBody;\r",
															"try {\r",
															"    requestBody = '{' \r",
															"        + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
															"        + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
															"        + '\"requestor-address\": ' + requestorAddress + '\",'\r",
															"        + '\"requestor-port\": ' + requestorPort + ','\r",
															"        + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
															"        + '}';\r",
															"} catch (error) {\r",
															"    logger.error(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    let URI = serverUrl + operationName;\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
															"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"\r",
															"var responseCode;\r",
															"var responseObject = {};\r",
															"try {\r",
															"    let response;\r",
															"    response = pm.response;\r",
															"\r",
															"    responseCode = parseInt(response.code);\r",
															"\r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        responseObject = JSON.parse(response.stream)\r",
															"\r",
															"    } else {\r",
															"        responseObject = {}\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! result could not be extracted.\")\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"var requestId;\r",
															"var prerequisiteSuccess = false;\r",
															"try {\r",
															"    requestId = responseObject[\"request-id\"];\r",
															"    pm.collectionVariables.set(\"requestId\", requestId);\r",
															"    prerequisiteSuccess = true;\r",
															"} catch (error){\r",
															"    logger.error(\"Prerequisite fail: requestId could not be set\");\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set(\"prerequisiteSuccess\", prerequisiteSuccess);\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /v1/receive-current-mac-table-of-device - valid requestBody response",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"//logger.struc(\"\\n----- \" + operationName + \" acceptance -- Valid requestBody response -------------------------------\");\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    // load parameters from loadFile\r",
															"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
															"    var userName = pm.environment.get(\"userName\");\r",
															"    var originator = pm.environment.get(\"originator\");\r",
															"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
															"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"\r",
															"    // load from connectionVars\r",
															"    var operationKey = pm.collectionVariables.get(\"readOperationKey\");\r",
															"\r",
															"\r",
															"    var requestId = pm.collectionVariables.get(\"requestId\");\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"\r",
															"//normally the mountName is the first part of the requestId, but that's ignored here\r",
															"\r",
															"var requestBody;\r",
															"try {\r",
															"    requestBody = '{' \r",
															"        + '\"request-id\": ' + '\"' + requestId + '\",'\r",
															"        + '\"macAddressData\": '\r",
															"           + '[' \r",
															"                + '{'\r",
															"                    + '\"mount-name\": \"305251234\",'\r",
															"                    + '\"own-mac-address\": \"00:00:00:00:00:00\",'\r",
															"                    + '\"egress-ltp-uuid\": \"305251234+mac-inf-1234\",'\r",
															"                    + '\"original-ltp-name\": \"eth-1-0-3\",'\r",
															"                    + '\"vlan-id\": 17,'\r",
															"                    + '\"remote-mac-address\": \"01:01:01:01:01:01\",'\r",
															"                    + '\"time-stamp-of-data\": \"2010-11-20T14:00:00+01:00\"'\r",
															"                + '}'\r",
															"           + ']'\r",
															"        + '}';\r",
															"} catch (error) {\r",
															"    logger.error(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    let URI = serverUrl + operationName;\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
															"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining reference values\r",
															"****************************************************************************************/\r",
															"\r",
															"var expectedResponseCode = 204;     \r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"var prerequisiteSuccess;       // indicates if the read-current-mac-table request was successful (this is a prequisite)\r",
															"\r",
															"try {\r",
															"    prerequisiteSuccess = pm.collectionVariables.get(\"prerequisiteSuccess\");\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Input data could not be loaded.\")\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"\r",
															"var responseCode;\r",
															"try {\r",
															"    let response = pm.response;\r",
															"\r",
															"    responseCode = parseInt(response.code);\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! result could not be extracted.\")\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"\r",
															"// now do actual testing\r",
															"try {\r",
															"\r",
															"    if (prerequisiteSuccess == true){\r",
															"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
															"\r",
															"        pm.test(assertionName, function(){\r",
															"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
															"        });\r",
															"    } else {\r",
															"        //prerequisite request was not successful\r",
															"        pm.test(\"Prerequisite for \" + operationName + \" fullfilled\", function(){\r",
															"            pm.expect(false).to.be.true\r",
															"        });\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Testing could not be executed.\")\r",
															"}\r",
															"\r",
															"\r",
															"/*\r",
															"// now do actual testing\r",
															"try {\r",
															"\r",
															"    let assertionName;\r",
															"    let result;\r",
															"    let failureReason;\r",
															"\r",
															"    //Test 1: if the prerequisite was not successful, test cannot be executed\r",
															"    if (prerequisiteSuccess != true){\r",
															"        result = FAIL;\r",
															"        assertionName = \"Prerequisite for \" + operationName + \" fullfilled\";\r",
															"        pm.test(assertionName, function () {\r",
															"            pm.expect(false).to.be.true\r",
															"        });\r",
															"    }\r",
															"    else {\r",
															"        //Test 2: the actual test - expected responseCode returned\r",
															"        assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
															"        //failureReason = \"Wrong responseCode (\" + responseCode + \") returned\";   \r",
															"\r",
															"        pm.test(assertionName, function () {\r",
															"            result = \"FAIL\";\r",
															"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
															"            result = \"PASS\";\r",
															"            //failureReason = \"\";\r",
															"        }); \r",
															"    }\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Testing could not be executed.\")\r",
															"}\r",
															"*/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "204"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid requestBody error responses 400",
									"item": [
										{
											"name": "Expected /v1/receive-current-mac-table-of-device - missing attribute error response (requestId)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Invalid requestBody error response (missing attribute requestId) -------------------------------\");\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    // load parameters from loadFile\r",
															"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
															"    var userName = pm.environment.get(\"userName\");\r",
															"    var originator = pm.environment.get(\"originator\");\r",
															"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
															"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"\r",
															"    // load from connectionVars\r",
															"    var operationKey = pm.collectionVariables.get(\"readOperationKey\");\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"\r",
															"// omit requestId\r",
															"\r",
															"var requestBody;\r",
															"try {\r",
															"    requestBody = '{' \r",
															"        //+ '\"request-id\": ' + '\"' + '101250001-12341234' + '\",'\r",
															"        + '\"macAddressData\": '\r",
															"           + '[' \r",
															"                + '{'\r",
															"                    + '\"mount-name\": \"101250001\",'\r",
															"                    + '\"own-mac-address\": \"00:00:00:00:00:00\",'\r",
															"                    + '\"egress-ltp-uuid\": \"305251234+mac-inf-1234\",'\r",
															"                    + '\"original-ltp-name\": \"eth-1-0-3\",'\r",
															"                    + '\"vlan-id\": 17,'\r",
															"                    + '\"remote-mac-address\": \"01:01:01:01:01:01\",'\r",
															"                    + '\"time-stamp-of-data\": \"2010-11-20T14:00:00+01:00\"'\r",
															"                + '}'\r",
															"           + ']'\r",
															"        + '}';\r",
															"} catch (error) {\r",
															"    logger.error(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    let URI = serverUrl + operationName;\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
															"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining reference values\r",
															"****************************************************************************************/\r",
															"\r",
															"let expectedResponseCode = 400;\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"\r",
															"var responseCode;\r",
															"var responseMessage;\r",
															"try {\r",
															"    let response = pm.response;\r",
															"    let responseObject;\r",
															"\r",
															"    responseCode = parseInt(response.code);\r",
															"\r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        responseObject = JSON.parse(response.stream)\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        responseMessage = responseObject.message;\r",
															"\r",
															"    } else {\r",
															"        responseMessage = {};\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! result could not be extracted.\")\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"// now do actual testing\r",
															"try {\r",
															"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
															"\r",
															"    pm.test(assertionName, function(){\r",
															"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
															"    });\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Testing could not be executed.\")\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /v1/receive-current-mac-table-of-device - missing attribute error response (nested attribute)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Invalid requestBody error response (missing nested attribute) -------------------------------\");\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    // load parameters from loadFile\r",
															"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
															"    var userName = pm.environment.get(\"userName\");\r",
															"    var originator = pm.environment.get(\"originator\");\r",
															"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
															"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"    \r",
															"    // load from connectionVars\r",
															"    var operationKey = pm.collectionVariables.get(\"readOperationKey\");\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"\r",
															"// omit requestId\r",
															"\r",
															"var requestBody;\r",
															"try {\r",
															"    requestBody = '{' \r",
															"        + '\"request-id\": ' + '\"' + '101250001-12341234' + '\",'\r",
															"        + '\"macAddressData\": '\r",
															"           + '[' \r",
															"                + '{'\r",
															"                    //+ '\"mount-name\": \"101250001\",'\r",
															"                    + '\"own-mac-address\": \"00:00:00:00:00:00\",'\r",
															"                    + '\"egress-ltp-uuid\": \"305251234+mac-inf-1234\",'\r",
															"                    + '\"original-ltp-name\": \"eth-1-0-3\",'\r",
															"                    + '\"vlan-id\": 17,'\r",
															"                    + '\"remote-mac-address\": \"01:01:01:01:01:01\",'\r",
															"                    + '\"time-stamp-of-data\": \"2010-11-20T14:00:00+01:00\"'\r",
															"                + '}'\r",
															"           + ']'\r",
															"        + '}';\r",
															"} catch (error) {\r",
															"    logger.error(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    let URI = serverUrl + operationName;\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
															"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining reference values\r",
															"****************************************************************************************/\r",
															"\r",
															"let expectedResponseCode = 400;\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"\r",
															"var responseCode;\r",
															"var responseMessage;\r",
															"try {\r",
															"    let response = pm.response;\r",
															"    let responseObject;\r",
															"\r",
															"    responseCode = parseInt(response.code);\r",
															"\r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        responseObject = JSON.parse(response.stream)\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        responseMessage = responseObject.message;\r",
															"\r",
															"    } else {\r",
															"        responseMessage = {};\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! result could not be extracted.\")\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"// now do actual testing\r",
															"try {\r",
															"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
															"\r",
															"    pm.test(assertionName, function(){\r",
															"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
															"    });\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Testing could not be executed.\")\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Expected /v1/receive-current-mac-table-of-device - missing requestBody error response",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Missing requestBody error response -------------------------------\");\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    // load parameters from loadFile\r",
															"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
															"    var userName = pm.environment.get(\"userName\");\r",
															"    var originator = pm.environment.get(\"originator\");\r",
															"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
															"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"    \r",
															"    // load from connectionVars\r",
															"    var operationKey = pm.collectionVariables.get(\"readOperationKey\");\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    let URI = serverUrl + operationName;\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
															"    \r",
															"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
															"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining reference values\r",
															"****************************************************************************************/\r",
															"\r",
															"let expectedResponseCode = 400;\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"\r",
															"var responseCode;\r",
															"var responseMessage;\r",
															"try {\r",
															"    let response = pm.response;\r",
															"    let responseObject;\r",
															"\r",
															"    responseCode = parseInt(response.code);\r",
															"\r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        responseObject = JSON.parse(response.stream)\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        responseMessage = responseObject.message;\r",
															"\r",
															"    } else {\r",
															"        responseMessage = {};\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! result could not be extracted.\")\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"// now do actual testing\r",
															"try {\r",
															"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
															"\r",
															"    pm.test(assertionName, function(){\r",
															"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
															"    });\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Testing could not be executed.\")\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "400"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unknown requestId error response - 500",
									"item": [
										{
											"name": "Expected /v1/receive-current-mac-table-of-device - unknown requestId error response",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Unknown requestId error response -------------------------------\");\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    // load parameters from loadFile\r",
															"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
															"    var userName = pm.environment.get(\"userName\");\r",
															"    var originator = pm.environment.get(\"originator\");\r",
															"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
															"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"    \r",
															"    // load from connectionVars\r",
															"    var operationKey = pm.collectionVariables.get(\"readOperationKey\");\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Dummy Parameters\r",
															"****************************************************************************************/\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining Request Body\r",
															"****************************************************************************************/\r",
															"\r",
															"// MATR returns requestIds in the following format: <mountname>-<some number>, so if we omit the mountName part\r",
															"// this will definitely not be found in NEPs lookup table\r",
															"\r",
															"var requestBody;\r",
															"try {\r",
															"    requestBody = '{' \r",
															"        + '\"request-id\": ' + '\"' + '1234' + '\",'\r",
															"        + '\"macAddressData\": '\r",
															"           + '[' \r",
															"                + '{'\r",
															"                    + '\"mount-name\": \"101250001\",'\r",
															"                    + '\"own-mac-address\": \"00:00:00:00:00:00\",'\r",
															"                    + '\"egress-ltp-uuid\": \"305251234+mac-inf-1234\",'\r",
															"                    + '\"original-ltp-name\": \"eth-1-0-3\",'\r",
															"                    + '\"vlan-id\": 17,'\r",
															"                    + '\"remote-mac-address\": \"01:01:01:01:01:01\",'\r",
															"                    + '\"time-stamp-of-data\": \"2010-11-20T14:00:00+01:00\"'\r",
															"                + '}'\r",
															"           + ']'\r",
															"        + '}';\r",
															"} catch (error) {\r",
															"    logger.error(\"!Could not define request body. \");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"\r",
															"try {\r",
															"    let URI = serverUrl + operationName;\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
															"\r",
															"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
															"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
															"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
															"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
															"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"/****************************************************************************************\r",
															"* Defining reference values\r",
															"****************************************************************************************/\r",
															"\r",
															"let expectedResponseCode = 500;\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Extracting Result\r",
															"****************************************************************************************/\r",
															"\r",
															"var responseCode;\r",
															"var responseMessage;\r",
															"try {\r",
															"    let response = pm.response;\r",
															"    let responseObject;\r",
															"\r",
															"    responseCode = parseInt(response.code);\r",
															"\r",
															"    if ( Math.floor(responseCode/100) === 2 ) {\r",
															"        responseObject = JSON.parse(response.stream)\r",
															"        responseObject = JSON.parse(response.stream);\r",
															"        responseMessage = responseObject.message;\r",
															"\r",
															"    } else {\r",
															"        responseMessage = {};\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! result could not be extracted.\")\r",
															"} \r",
															"\r",
															"/****************************************************************************************\r",
															"* Testing\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"// now do actual testing\r",
															"try {\r",
															"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
															"\r",
															"    pm.test(assertionName, function(){\r",
															"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
															"    });\r",
															"\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Testing could not be executed.\")\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Collection Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "500"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "**Prerequisite:**\n\nRequestor address info needs to looked up in the NEPs lookup table, with requestId as key. If the requestId is not found in that lookup table, NEP shall return a 500 error, as it does not know where to send the MAC address data to.\n\nWhen test are just run against a MOCK NEP, a requestId could be provided in the loadFile, but in the lab/live environment the test would fail.\n\nThus, a /v1/read-current-mac-table-from-device is called as part of the test. The loadfile contains the parameters for this service call (with a valid mountName!; the requestor information can also be a set of dummy information, as it is not checked, whether the callback is done). When NEP receives the requestId, that requestId is written to the collectionVariables and the receive-operation then can lookup that existing requestId.\n\n**Steps:**\n\n1. Prep:\n    \n    1. get the operationServer for /v1/receive-current-mac-table-of-device (currentOperationServer)\n        \n    2. get the operationServer for /v1/read-current-mac-table-from-device (additional opServer)\n        \n    3. read the input parameters from the loadFile (for the service in (b))\n        \n2. Dependency operation: Execute /v1/read-current-mac-table-from-device to get a requestId that is written to NEP's internal lookup table (and into the test suite collectionVariables)\n    \n3. Actual operation test: Execute /v1/receive-current-mac-table-of-device, with the requestId being the one from the collectionVariables and apply all required checks\n    \n\nNote: once a the receive-operation for a given requestId has been called, the requestId shall be deleted from the lookup table.\n\n---\n\nTests can only be run against NEP, but not MATR"
						}
					]
				},
				{
					"name": "NEP and MATR",
					"item": [
						{
							"name": "authentication - unauthorized response (401)",
							"item": [
								{
									"name": "Expected /v1/provide-mac-table-of-all-devices - invalid authentication response",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var operationName = \"/v1/provide-mac-table-of-all-devices\";\r",
													"pm.environment.set(operationName, \"operationName\");\r",
													"\r",
													"logger.struc(\"\\n----- \" + operationName + \" acceptance -- invalid authentication rejection -------------------------------\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    // load parameters from loadFile\r",
													"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
													"    var userName = pm.environment.get(\"userName\");\r",
													"    var originator = pm.environment.get(\"originator\");\r",
													"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
													"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
													"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
													"\r",
													"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
													"\r",
													"    // load from collection Vars\r",
													"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
													"\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"//authentication is checked before requestBody becomes valid, so it can be omitted.\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    let URI = serverUrl + operationName;\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"\r",
													"\r",
													"    //pm.request.headers.upsert({key:\"operation-key\", value: operationKey}); - required but ommitted\r",
													"    //pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode}); - not required\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
													"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
													"\r",
													"} catch (error) {\r",
													"    //logger.error(error);\r",
													"    logger.error(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var operationName = pm.environment.get(\"operationName\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining reference values\r",
													"****************************************************************************************/\r",
													"\r",
													"// if no valid authentication is provided, server shall return 401 - unauthorized\r",
													"let expectedResponseCode = 401;\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
													"} catch (error){\r",
													"    console.error(\"! Could not read serverToBeApplied.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"\r",
													"var responseCode;\r",
													"var responseMessage;\r",
													"try {\r",
													"    let response = pm.response;\r",
													"    let responseObject;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        responseMessage = responseObject.message;\r",
													"\r",
													"    } else {\r",
													"        responseMessage = {};\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"} \r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"\r",
													"if ((serverToBeApplied == \"nep\") || (serverToBeApplied == \"matr\")){\r",
													"\r",
													"// now do actual testing\r",
													"    try {\r",
													"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
													"\r",
													"        pm.test(assertionName, function(){\r",
													"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
													"        });\r",
													"\r",
													"\r",
													"    } catch (error) {\r",
													"        logger.error(\"! Testing could not be executed.\")\r",
													"    }\r",
													"} else {\r",
													"    logger.debug(\"no test to be carried out, test for this service not applicable for serverToBeApplied=\" + serverToBeApplied);\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/provide-mac-table-of-specific-device - invalid authentication response",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var operationName = \"/v1/provide-mac-table-of-specific-device\";\r",
													"pm.environment.set(operationName, \"operationName\");\r",
													"\r",
													"logger.struc(\"\\n----- \" + operationName + \" acceptance -- invalid authentication rejection -------------------------------\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    // load parameters from loadFile\r",
													"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
													"    var userName = pm.environment.get(\"userName\");\r",
													"    var originator = pm.environment.get(\"originator\");\r",
													"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
													"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
													"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
													"\r",
													"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
													"\r",
													"    // load from collection Vars\r",
													"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
													"\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"//authentication is checked before requestBody becomes valid, so it can be omitted.\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    let URI = serverUrl + operationName;\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"\r",
													"\r",
													"    //pm.request.headers.upsert({key:\"operation-key\", value: operationKey}); - required but ommitted\r",
													"    //pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode}); - not required\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
													"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
													"\r",
													"} catch (error) {\r",
													"    //logger.error(error);\r",
													"    logger.error(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var operationName = pm.environment.get(\"operationName\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining reference values\r",
													"****************************************************************************************/\r",
													"\r",
													"// if no valid authentication is provided, server shall return 401 - unauthorized\r",
													"let expectedResponseCode = 401;\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
													"} catch (error){\r",
													"    console.error(\"! Could not read serverToBeApplied.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"\r",
													"var responseCode;\r",
													"var responseMessage;\r",
													"try {\r",
													"    let response = pm.response;\r",
													"    let responseObject;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        responseMessage = responseObject.message;\r",
													"\r",
													"    } else {\r",
													"        responseMessage = {};\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"} \r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"\r",
													"if ((serverToBeApplied == \"nep\") || (serverToBeApplied == \"matr\")){\r",
													"\r",
													"// now do actual testing\r",
													"    try {\r",
													"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
													"\r",
													"        pm.test(assertionName, function(){\r",
													"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
													"        });\r",
													"\r",
													"\r",
													"    } catch (error) {\r",
													"        logger.error(\"! Testing could not be executed.\")\r",
													"    }\r",
													"} else {\r",
													"    logger.debug(\"no test to be carried out, test for this service not applicable for serverToBeApplied=\" + serverToBeApplied);\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expected /v1/read-current-mac-table-from-device - invalid authentication response",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var operationName = \"/v1/read-current-mac-table-from-device\";\r",
													"pm.environment.set(operationName, \"operationName\");\r",
													"\r",
													"logger.struc(\"\\n----- \" + operationName + \" acceptance -- invalid authentication rejection -------------------------------\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    // load parameters from loadFile\r",
													"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
													"    var userName = pm.environment.get(\"userName\");\r",
													"    var originator = pm.environment.get(\"originator\");\r",
													"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
													"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
													"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
													"\r",
													"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
													"\r",
													"    // load from collection Vars\r",
													"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
													"\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Dummy Parameters\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining Request Body\r",
													"****************************************************************************************/\r",
													"//authentication is checked before requestBody becomes valid, so it can be omitted.\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"\r",
													"try {\r",
													"    let URI = serverUrl + operationName;\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", URI);\r",
													"\r",
													"\r",
													"    //pm.request.headers.upsert({key:\"operation-key\", value: operationKey}); - required but ommitted\r",
													"    //pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode}); - not required\r",
													"\r",
													"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
													"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
													"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
													"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
													"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
													"\r",
													"} catch (error) {\r",
													"    //logger.error(error);\r",
													"    logger.error(\"! Local variables could not be set.\");\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var operationName = pm.environment.get(\"operationName\");\r",
													"\r",
													"/****************************************************************************************\r",
													"* Defining reference values\r",
													"****************************************************************************************/\r",
													"\r",
													"// if no valid authentication is provided, server shall return 401 - unauthorized\r",
													"let expectedResponseCode = 401;\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
													"} catch (error){\r",
													"    console.error(\"! Could not read serverToBeApplied.\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"\r",
													"var responseCode;\r",
													"var responseMessage;\r",
													"try {\r",
													"    let response = pm.response;\r",
													"    let responseObject;\r",
													"\r",
													"    responseCode = parseInt(response.code);\r",
													"\r",
													"    if ( Math.floor(responseCode/100) === 2 ) {\r",
													"        responseObject = JSON.parse(response.stream)\r",
													"        responseObject = JSON.parse(response.stream);\r",
													"        responseMessage = responseObject.message;\r",
													"\r",
													"    } else {\r",
													"        responseMessage = {};\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"} \r",
													"\r",
													"/****************************************************************************************\r",
													"* Testing\r",
													"****************************************************************************************/\r",
													"\r",
													"if ((serverToBeApplied == \"nep\") || (serverToBeApplied == \"matr\")){\r",
													"\r",
													"// now do actual testing\r",
													"    try {\r",
													"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
													"\r",
													"        pm.test(assertionName, function(){\r",
													"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
													"        });\r",
													"\r",
													"\r",
													"    } catch (error) {\r",
													"        logger.error(\"! Testing could not be executed.\")\r",
													"    }\r",
													"} else {\r",
													"    logger.debug(\"no test to be carried out, test for this service not applicable for serverToBeApplied=\" + serverToBeApplied);\r",
													"}\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Updating Environmental Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-response-code",
												"value": "401"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Checks whether the App responds correctly (401 - unauthorized), if the services are not called with the required authentication method and token.\n\n- services called by Netexplorer: use basicAuth (user/password) provided as authorizationCode\n    \n- services called at MATR: use operationKey\n    \n- the testcases in this subfolder just check if a request without proper authentication is rejected with a 401, unauthorized\n    \n    - the positive case - i.e. when the correct authentication is provided, is checked implicitly during execution of the other testcases (e.g. responseBody completeness); they all would fail if the wrong authentication method/token would be provided.\n        \n    - for the tests all services are called without both operationKey and authorizationCode, so it does not matter against which target App/server the requests are run, but for the evaluation of test results a switch is included, so that non-matr services are not tested against MATR\n        \n\n---\n\n**When testcase collection is run to test NEP:**\n\n- test services for basicAuth (authorization header), which are called from outside SDN\n    \n    - /v1/provide-list-of-connected-devices\n        \n    - /v1/provide-mac-table-of-all-devices\n        \n    - /v1/provide-mac-table-of-specific-device\n        \n    - /v1/read-current-mac-table-from-device\n        \n- test service with operationKey instead, which are NOT called from outside SDN\n    \n    - /v1/receive-current-mac-table-of-device\n        \n\n---\n\n**When testcase collection is run to test MATR:**\n\n- test services with operationKey (from MATR CC):\n    \n    - /v1/provide-mac-table-of-all-devices\n        \n    - /v1/provide-mac-table-of-specific-device\n        \n    - /v1/read-current-mac-table-from-device"
						},
						{
							"name": "/v1/provide-mac-table-of-all-devices",
							"item": [
								{
									"name": "Prep",
									"item": [
										{
											"name": "for setting currentOperationServer info and responseSchema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/provide-mac-table-of-all-devices\";\r",
															"pm.environment.set(\"operationName\", operationName);\r",
															"\r",
															"logger.debug(\"[Prep] Write ltpList information (operationKey, lifeCycleState, operationServerUuid) to collection variables for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collection variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"    /*\r",
															"    //define the responseSchema\r",
															"    let responseSchema = {\r",
															"        \"type\" : \"object\",\r",
															"        \"required\": [\r",
															"            \"mount-name-list\"\r",
															"        ],\r",
															"        \"properties\": {\r",
															"            \"mount-name-list\": {\r",
															"                \"type\": \"array\",\r",
															"                \"items\": {\r",
															"                    \"type\": \"string\"\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    */\r",
															"\r",
															"    //define the responseSchema\r",
															"    let responseSchema = {\r",
															"        \"type\": \"array\",\r",
															"        \"items\": {\r",
															"            \"type\": \"object\",\r",
															"            \"properties\": {\r",
															"                \"mount-name\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"own-mac-address\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"egress-ltp-uuid\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"original-ltp-name\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"vlan-id\": {\r",
															"                    \"type\": \"integer\"\r",
															"                },\r",
															"                \"remote-mac-address\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"time-stamp-of-data\": {\r",
															"                    \"type\": \"string\"\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"\r",
															"\r",
															"// ----- now set the responseSchema (e.g. used in responseBody completeness test) ----------------\r",
															"try {\r",
															"\r",
															"    // set currentOperationServer info (operationKey, serverUuid, lifeCycleState)\r",
															"    setCurrentOpServerCollectionVars(operationName);\r",
															"\r",
															"    // set the responseSchema\r",
															"    pm.collectionVariables.set(\"responseSchema\", responseSchema);\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Collection variables (responseSchema) could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let REQUEST_BODY = \"\";\r",
															"\r",
															"    let authorization = pm.environment.get(\"authorizationCode\");\r",
															"    let accept = \"application/json\";\r",
															"    let contentType = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorization});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value: accept});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value: contentType});\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName) {\r",
															"    let ltpList = pm.environment.get('ltpList');\r",
															"\r",
															"    let operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Exception in function : FindOperationServer.\");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function setCurrentOpServerCollectionVars(operationName){\r",
															"\r",
															"    // Find the currentOperationServer from the ltpList for the operationName\r",
															"    // and write info to the environment for subsequent requests\r",
															"    // - lifeCycleState\r",
															"    // - operationServerUuid\r",
															"    // - operationKey\r",
															"    try {\r",
															"\r",
															"        let currentOperationServer = FindOperationServer(operationName);\r",
															"        let operationServerUuid = currentOperationServer[\"uuid\"];\r",
															"        let lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
															"        let operationKey = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"        pm.collectionVariables.set(\"operationServerUuid\", operationServerUuid);\r",
															"        pm.collectionVariables.set(\"lifeCycleState\", lifeCycleState);\r",
															"        pm.collectionVariables.set(\"operationKey\", operationKey);\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Collection variables (currentOperationServer info) could not be set.\");\r",
															"    }\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"operationServerUuid\"));\r",
															"logger.debug(pm.collectionVariables.get(\"lifeCycleState\"));\r",
															"logger.debug(pm.collectionVariables.get(\"operationKey\"));\r",
															"logger.debug(pm.collectionVariables.get(\"responseSchema\"));\r",
															"*/"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "ResponseBody completeness - 200",
											"item": [
												{
													"name": "Expected /v1/provide-mac-table-of-all-devices - responseBody completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Response body completeness -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var reference;      // get the reference responseSchema\r",
																	"try {\r",
																	"\r",
																	"    reference = pm.collectionVariables.get(\"responseSchema\");\r",
																	"\r",
																	"} catch(error){\r",
																	"    logger.error(\"! Input data could not be loaded.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseObject = {};\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"\r",
																	"    } else {\r",
																	"        responseObject = {}\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"\r",
																	"    let assertionName;\r",
																	"    let result;\r",
																	"    let failureReason;\r",
																	"\r",
																	"\r",
																	"    if (Math.floor(responseCode/100)===2) {\r",
																	"        let validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
																	"\r",
																	"        logger.log(\"Reference Schema:\");\r",
																	"        logger.log(reference);\r",
																	"\r",
																	"        logger.log(\"Response:\");\r",
																	"        logger.log(responseObject);\r",
																	"\r",
																	"        logger.log(\"Validation Result:\");\r",
																	"        logger.log(validationResult);\r",
																	"\r",
																	"        pm.test(\"Response matches schema definition\", function () {\r",
																	"            pm.expect(validationResult.errors.length).to.equal(0)\r",
																	"        });\r",
																	"\r",
																	"    } else {\r",
																	"        logger.warn(\"Response could not be loaded.\");\r",
																	"        pm.test(\"Response could be loaded\", function () {\r",
																	"            pm.expect(false).to.be.true\r",
																	"        })\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! validation could not be completely executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "- Checks whether /v1/provide-mac-table-of-devices returns the expected response (200, valid response schema)\n    \n- can also be checked against MATR"
						},
						{
							"name": "/v1/provide-mac-table-of-specific-device",
							"item": [
								{
									"name": "Prep",
									"item": [
										{
											"name": "for setting currentOperationServer info and responseSchema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/provide-mac-table-of-specific-device\";\r",
															"pm.environment.set(\"operationName\", operationName);\r",
															"\r",
															"console.debug(\"[Prep] Write ltpList information (operationKey, lifeCycleState, operationServerUuid) to collection variables for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collection variables\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"    /*\r",
															"    //define the responseSchema\r",
															"    let responseSchema = {\r",
															"        \"type\" : \"object\",\r",
															"        \"required\": [\r",
															"            \"mount-name-list\"\r",
															"        ],\r",
															"        \"properties\": {\r",
															"            \"mount-name-list\": {\r",
															"                \"type\": \"array\",\r",
															"                \"items\": {\r",
															"                    \"type\": \"string\"\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"    */\r",
															"\r",
															"    //define the responseSchema\r",
															"    let responseSchema = {\r",
															"        \"type\": \"array\",\r",
															"        \"items\": {\r",
															"            \"type\": \"object\",\r",
															"            \"properties\": {\r",
															"                \"mount-name\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"own-mac-address\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"egress-ltp-uuid\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"original-ltp-name\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"vlan-id\": {\r",
															"                    \"type\": \"integer\"\r",
															"                },\r",
															"                \"remote-mac-address\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"time-stamp-of-data\": {\r",
															"                    \"type\": \"string\"\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"\r",
															"\r",
															"// ----- now set the responseSchema (e.g. used in responseBody completeness test) ----------------\r",
															"try {\r",
															"\r",
															"    // set currentOperationServer info (operationKey, serverUuid, lifeCycleState)\r",
															"    setCurrentOpServerCollectionVars(operationName);\r",
															"\r",
															"    // set the responseSchema\r",
															"    pm.collectionVariables.set(\"responseSchema\", responseSchema);\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Collection variables (responseSchema) could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let REQUEST_BODY = \"\";\r",
															"\r",
															"    let authorization = pm.environment.get(\"authorizationCode\");\r",
															"    let accept = \"application/json\";\r",
															"    let contentType = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorization});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value: accept});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value: contentType});\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName) {\r",
															"    let ltpList = pm.environment.get('ltpList');\r",
															"\r",
															"    let operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Exception in function : FindOperationServer.\");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function setCurrentOpServerCollectionVars(operationName){\r",
															"\r",
															"    // Find the currentOperationServer from the ltpList for the operationName\r",
															"    // and write info to the environment for subsequent requests\r",
															"    // - lifeCycleState\r",
															"    // - operationServerUuid\r",
															"    // - operationKey\r",
															"    try {\r",
															"\r",
															"        let currentOperationServer = FindOperationServer(operationName);\r",
															"        let operationServerUuid = currentOperationServer[\"uuid\"];\r",
															"        let lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
															"        let operationKey = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"        pm.collectionVariables.set(\"operationServerUuid\", operationServerUuid);\r",
															"        pm.collectionVariables.set(\"lifeCycleState\", lifeCycleState);\r",
															"        pm.collectionVariables.set(\"operationKey\", operationKey);\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Collection variables (currentOperationServer info) could not be set.\");\r",
															"    }\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"operationServerUuid\"));\r",
															"logger.debug(pm.collectionVariables.get(\"lifeCycleState\"));\r",
															"logger.debug(pm.collectionVariables.get(\"operationKey\"));\r",
															"logger.debug(pm.collectionVariables.get(\"responseSchema\"));\r",
															"*/"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get config: mountName from userInput",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/provide-mac-table-of-specific-device\";\r",
															"pm.environment.set(\"operationName\", operationName);\r",
															"\r",
															"console.debug(\"[Config] read dummyMountName from loadFile for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"    var serviceInputParameters;\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"        serviceInputParameters = pm.environment.get(\"serviceInputParameters\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting default values\r",
															"****************************************************************************************/\r",
															"\r",
															"    var dummyMountName = \"305251234\";\r",
															"\r",
															"/****************************************************************************************\r",
															"* Read config values from loadFile data\r",
															"****************************************************************************************/\r",
															"\r",
															"    try {\r",
															"        let parameters = FindServiceUnderTestParameters(operationName);\r",
															"\r",
															"        if (parameters != undefined){ // if omitted, default values are used\r",
															"            dummyMountName = parameters[\"mountName\"]; \r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Local variables could not be set.\");\r",
															"    }\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collectionVariables\r",
															"****************************************************************************************/\r",
															"\r",
															"    pm.collectionVariables.set(\"dummyMountName\", dummyMountName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"\r",
															"    let requestBody = '{}';\r",
															"\r",
															"    let authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"    let operationKey = pm.environment.get(\"operationKey\");\r",
															"    let userName = pm.environment.get(\"userName\");\r",
															"    let originator = pm.environment.get(\"originator\");\r",
															"    let xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    let traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    let customerJourney =  pm.environment.get(\"customerJourney\");\r",
															"    \r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"    \r",
															"    pm.request.headers.upsert({ key: \"Authorization\", value: authorizationCode });\r",
															"    pm.request.headers.upsert({ key: \"operation-key\", value: operationKey });\r",
															"    pm.request.headers.upsert({ key: \"user\", value: userName });\r",
															"    pm.request.headers.upsert({ key: \"originator\", value: originator });\r",
															"    pm.request.headers.upsert({ key: \"x-correlator\", value: xCorrelator });\r",
															"    pm.request.headers.upsert({ key: \"trace-indicator\", value: traceIndicator });\r",
															"    pm.request.headers.upsert({ key: \"customer-journey\", value: customerJourney });\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindServiceUnderTestParameters(operationName){\r",
															"    let serviceUnderTest;\r",
															"    let parameters;\r",
															"    try{\r",
															"        for (let i=0; i<serviceInputParameters.length; i++){\r",
															"            serviceUnderTest = serviceInputParameters[i][\"serviceUnderTest\"];\r",
															"            if (serviceUnderTest == operationName){\r",
															"                parameters = serviceInputParameters[i][\"parameters\"];\r",
															"                break;\r",
															"            }\r",
															"        } \r",
															"    }\r",
															"     catch (error) {\r",
															"    }\r",
															"    return parameters;\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//logger.debug(pm.collectionVariables.get(\"dummyMountName\"));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "ResponseBody completeness - 200",
											"item": [
												{
													"name": "Expected /v1/provide-mac-table-of-specific-device - responseBody completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Response body completeness -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{' \r",
																	"        + '\"mount-name\": ' + '\"' + dummyMountName + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var reference;      // get the reference responseSchema\r",
																	"try {\r",
																	"\r",
																	"    reference = pm.collectionVariables.get(\"responseSchema\");\r",
																	"\r",
																	"} catch(error){\r",
																	"    logger.error(\"! Input data could not be loaded.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseObject = {};\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"\r",
																	"    } else {\r",
																	"        responseObject = {}\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"\r",
																	"    let assertionName;\r",
																	"    let result;\r",
																	"    let failureReason;\r",
																	"\r",
																	"\r",
																	"    if (Math.floor(responseCode/100)===2) {\r",
																	"        let validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
																	"\r",
																	"        logger.log(\"Reference Schema:\");\r",
																	"        logger.log(reference);\r",
																	"\r",
																	"        logger.log(\"Response:\");\r",
																	"        logger.log(responseObject);\r",
																	"\r",
																	"        logger.log(\"Validation Result:\");\r",
																	"        logger.log(validationResult);\r",
																	"\r",
																	"        pm.test(\"Response matches schema definition\", function () {\r",
																	"            pm.expect(validationResult.errors.length).to.equal(0)\r",
																	"        });\r",
																	"\r",
																	"    } else {\r",
																	"        logger.warn(\"Response could not be loaded.\");\r",
																	"        pm.test(\"Response could be loaded\", function () {\r",
																	"            pm.expect(false).to.be.true\r",
																	"        })\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! validation could not be completely executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "RequestBody with additional attributes response - 200",
											"item": [
												{
													"name": "Expected /v1/provide-mac-table-of-specific-device - requestBody with additional attributes response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- RequestBody with additional attributes response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");   \r",
																	"\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	" \r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{' \r",
																	"        + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"        + '\"some-attribute\": \"xyz\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// additional attributes are ignored by MATR, we do the same for NEP\r",
																	"// so this should return a 200\r",
																	"let expectedResponseCode = 200;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid requestBody - 400",
											"item": [
												{
													"name": "Expected /v1/provide-mac-table-of-specific-device - missing required attribute in requestBody error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Missing required attribute in requestBody -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");   \r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{' \r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 400;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/provide-mac-table-of-specific-device - missing requestBody error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Missing requestBody error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"\r",
																	"\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 400;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Unknown device error response - 404",
											"item": [
												{
													"name": "Expected /v1/provide-mac-table-of-specific-device - unknown device error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Unknown device error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var dummyMountName = \"someUnknownDevice\"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{' \r",
																	"        + '\"mount-name\": ' + '\"' + dummyMountName + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"//currently MATR returns a 500, there's open MATR issue #225 to change that responseCode to 404\r",
																	"let expectedResponseCode = 404;  \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "404"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "- checkes whether /v1/provide-mac-table-of-specific-device returns the expected response (200, valid response schema) for a valid input request\n    \n- also checks whether correct error responses are returned\n    \n- tests CANNOT be run against MATR, as MATR does not return the same responseCodes for all testcases!"
						},
						{
							"name": "/v1/read-current-mac-table-from-device",
							"item": [
								{
									"name": "Prep",
									"item": [
										{
											"name": "for setting currentOperationServer info and responseSchema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = \"/v1/read-current-mac-table-from-device\";\r",
															"pm.environment.set(\"operationName\", operationName);\r",
															"\r",
															"console.debug(\"[Prep] Write ltpList information (operationKey, lifeCycleState, operationServerUuid) to collection variables for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collection variables\r",
															"****************************************************************************************/\r",
															"\r",
															"    //define the responseSchema\r",
															"    let responseSchema = {\r",
															"        \"type\": \"object\",\r",
															"        \"properties\": {\r",
															"            \"request-id\": {\r",
															"                \"type\": \"string\"\r",
															"            }\r",
															"        }\r",
															"    };\r",
															"\r",
															"\r",
															"// ----- now set the responseSchema (e.g. used in responseBody completeness test) ----------------\r",
															"try {\r",
															"\r",
															"    // set currentOperationServer info (operationKey, serverUuid, lifeCycleState)\r",
															"    setCurrentOpServerCollectionVars(operationName);\r",
															"\r",
															"    // set the responseSchema\r",
															"    pm.collectionVariables.set(\"responseSchema\", responseSchema);\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Collection variables (responseSchema) could not be set.\");\r",
															"}\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    let REQUEST_BODY = \"\";\r",
															"\r",
															"    let authorization = pm.environment.get(\"authorizationCode\");\r",
															"    let accept = \"application/json\";\r",
															"    let contentType = \"application/json\";\r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value: authorization});\r",
															"\r",
															"    pm.request.headers.upsert({key:\"Accept\", value: accept});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value: contentType});\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindOperationServer(operationName) {\r",
															"    let ltpList = pm.environment.get('ltpList');\r",
															"\r",
															"    let operationServer = \"\";\r",
															"    try {\r",
															"        let sampleUuid;\r",
															"        for(let i=0; i<ltpList.length; i++) {\r",
															"            sampleUuid = ltpList[i][\"uuid\"];\r",
															"            if(sampleUuid.includes(\"op-s-\")) {\r",
															"                let sampleOperationName;\r",
															"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
															"                if(sampleOperationName == operationName) {\r",
															"                    operationServer = ltpList[i];\r",
															"                    return operationServer;\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Exception in function : FindOperationServer.\");\r",
															"    }\r",
															"    return operationServer;\r",
															"}\r",
															"\r",
															"function setCurrentOpServerCollectionVars(operationName){\r",
															"\r",
															"    // Find the currentOperationServer from the ltpList for the operationName\r",
															"    // and write info to the environment for subsequent requests\r",
															"    // - lifeCycleState\r",
															"    // - operationServerUuid\r",
															"    // - operationKey\r",
															"    try {\r",
															"\r",
															"        let currentOperationServer = FindOperationServer(operationName);\r",
															"        let operationServerUuid = currentOperationServer[\"uuid\"];\r",
															"        let lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
															"        let operationKey = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
															"\r",
															"        pm.collectionVariables.set(\"operationServerUuid\", operationServerUuid);\r",
															"        pm.collectionVariables.set(\"lifeCycleState\", lifeCycleState);\r",
															"        pm.collectionVariables.set(\"operationKey\", operationKey);\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Collection variables (currentOperationServer info) could not be set.\");\r",
															"    }\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"operationServerUuid\"));\r",
															"logger.debug(pm.collectionVariables.get(\"lifeCycleState\"));\r",
															"logger.debug(pm.collectionVariables.get(\"operationKey\"));\r",
															"logger.debug(pm.collectionVariables.get(\"responseSchema\"));\r",
															"*/"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-mock-response-code",
														"value": "200"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get config: parameters from userInput",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var operationName = pm.environment.get(\"operationName\");\r",
															"\r",
															"console.debug(\"[Config] read parameters from loadFile for \" + operationName);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"\r",
															"    var serviceInputParameters;\r",
															"    try {\r",
															"        var URI = pm.environment.get(\"dummyUri\");\r",
															"        serviceInputParameters = pm.environment.get(\"serviceInputParameters\");\r",
															"\r",
															"    } catch(error) {\r",
															"        logger.error(\"! Cannot load input data.\");\r",
															"    }\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting default values\r",
															"****************************************************************************************/\r",
															"\r",
															"    var dummyMountName = \"305251234\";\r",
															"    var requestorProtocol = \"HTTP\";\r",
															"    var requestorAddress = \"1.1.1.1\";\r",
															"    var requestorPort = \"1234\";\r",
															"    var requestorReceiveOperation = \"/receive-current-mac-table-of-device\"; \r",
															"\r",
															"/****************************************************************************************\r",
															"* Read config values from loadFile data\r",
															"****************************************************************************************/\r",
															"\r",
															"    try {\r",
															"        let parameters = FindServiceUnderTestParameters(operationName);\r",
															"\r",
															"        if (parameters != undefined){ // if omitted, default values are used\r",
															"            dummyMountName = parameters[\"mountName\"]; \r",
															"            requestorProtocol = parameters[\"requestorProtocol\"];\r",
															"            requestorAddress = parameters[\"requestorAddress\"];\r",
															"            requestorPort = parameters[\"requestorPort\"];\r",
															"            requestorReceiveOperation = parameters[\"requestorReceiveOperation\"];\r",
															"\r",
															"            requestorDomainName = parameters[\"requestorDomainName\"];        //only defined for MATR, not for NEP\r",
															"        }\r",
															"\r",
															"    } catch (error) {\r",
															"        logger.error(\"! Local variables could not be set.\");\r",
															"    }\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting collectionVariables\r",
															"****************************************************************************************/\r",
															"\r",
															"    pm.collectionVariables.set(\"dummyMountName\", dummyMountName);\r",
															"    pm.collectionVariables.set(\"requestorProtocol\", requestorProtocol);\r",
															"    pm.collectionVariables.set(\"requestorAddress\", requestorAddress);\r",
															"    pm.collectionVariables.set(\"requestorPort\", requestorPort);\r",
															"    pm.collectionVariables.set(\"requestorReceiveOperation\", requestorReceiveOperation);\r",
															"    pm.collectionVariables.set(\"requestorDomainName\", requestorDomainName);\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"\r",
															"    let requestBody = '{}';\r",
															"\r",
															"    let authorizationCode = pm.environment.get(\"authorizationCode\");\r",
															"    let operationKey = pm.environment.get(\"operationKey\");\r",
															"    let userName = pm.environment.get(\"userName\");\r",
															"    let originator = pm.environment.get(\"originator\");\r",
															"    let xCorrelator = pm.environment.get(\"xCorrelator\");\r",
															"    let traceIndicator = pm.environment.get(\"traceIndicator\");\r",
															"    let customerJourney =  pm.environment.get(\"customerJourney\");\r",
															"    \r",
															"\r",
															"    pm.variables.clear();\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", requestBody);\r",
															"    \r",
															"    pm.request.headers.upsert({ key: \"Authorization\", value: authorizationCode });\r",
															"    pm.request.headers.upsert({ key: \"operation-key\", value: operationKey });\r",
															"    pm.request.headers.upsert({ key: \"user\", value: userName });\r",
															"    pm.request.headers.upsert({ key: \"originator\", value: originator });\r",
															"    pm.request.headers.upsert({ key: \"x-correlator\", value: xCorrelator });\r",
															"    pm.request.headers.upsert({ key: \"trace-indicator\", value: traceIndicator });\r",
															"    pm.request.headers.upsert({ key: \"customer-journey\", value: customerJourney });\r",
															"\r",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
															"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
															"\r",
															"} catch (error) {\r",
															"    logger.error(\"! Local variables could not be set.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															"function FindServiceUnderTestParameters(operationName){\r",
															"    let serviceUnderTest;\r",
															"    let parameters;\r",
															"    try{\r",
															"        for (let i=0; i<serviceInputParameters.length; i++){\r",
															"            serviceUnderTest = serviceInputParameters[i][\"serviceUnderTest\"];\r",
															"            if (serviceUnderTest == operationName){\r",
															"                parameters = serviceInputParameters[i][\"parameters\"];\r",
															"                break;\r",
															"            }\r",
															"        } \r",
															"    }\r",
															"     catch (error) {\r",
															"    }\r",
															"    return parameters;\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*\r",
															"logger.debug(pm.collectionVariables.get(\"dummyMountName\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorProtocol\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorAddress\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorPort\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorReceiveOperation\"));\r",
															"logger.debug(pm.collectionVariables.get(\"requestorDomainName\"));\r",
															"*/\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "RequestorInputAddress check - 200, target-dependent",
											"item": [
												{
													"name": "Expected /v1/read-current-mac-table-from-device - (address=ip) valid response (200)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- (address=ip) valid response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"\r",
																	"    // requestBody for NEP\r",
																	"    if (serverToBeApplied == \"nep\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + requestorAddress + '\",'\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"    // requestBody for MATR with ip\r",
																	"    else if (serverToBeApplied == \"matr\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + '{'\r",
																	"                + '\"ip-address\": ' + '{'\r",
																	"                   + '\"ipv-4-address\" :' + '\"' + requestorAddress + '\"'\r",
																	"                   + \"}\"\r",
																	"                + \"},\"\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 200;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/read-current-mac-table-from-device - [MATR](address=domain-name) valid response (200)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- [MATR](address=domain-name) valid response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"    var requestorDomainName = pm.collectionVariables.get(\"requestorDomainName\");    // only applicable for MATR, not for NEP\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    // requestBody for MATR with domainName\r",
																	"    if (serverToBeApplied == \"matr\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": '\r",
																	"              + '{'\r",
																	"                + '\"domain-name\":' + '\"' + requestorDomainName + '\"'\r",
																	"              + '}' + ','\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 200;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");    \r",
																	"} catch (error){\r",
																	"    console.error(\"! Could not read serverToBeApplied.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"if (serverToBeApplied == \"matr\"){\r",
																	"\r",
																	"    // now do actual testing\r",
																	"    try {\r",
																	"        let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"        pm.test(assertionName, function(){\r",
																	"            pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"        });\r",
																	"\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        logger.error(\"! Testing could not be executed.\")\r",
																	"    }\r",
																	"} else {\r",
																	"    logger.debug(\"no test to be carried out, test for this service not applicable for serverToBeApplied=\" + serverToBeApplied);\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "The service /v1/read-mac-table-from-current-device is offered both by NEP and by MATR.\n\n(NEP uses the MATR service).\n\nThe required input format however is slightly different:\n\n- NEP expects the requestor address to be an ip\n    \n- MATR: requires either an ip or a domain name, with a nested schema definition\n    \n\nThe requestBody is built depending on serverToBeApplied"
										},
										{
											"name": "ResponseBody completeness - 200",
											"item": [
												{
													"name": "Expected /v1/read-current-mac-table-from-device - responseBody completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Response body completeness -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");\r",
																	"\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"\r",
																	"    // requestBody for NEP\r",
																	"    if (serverToBeApplied == \"nep\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + requestorAddress + '\",'\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"    // requestBody for MATR with ip\r",
																	"    else if (serverToBeApplied == \"matr\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + '{'\r",
																	"                + '\"ip-address\": ' + '{'\r",
																	"                   + '\"ipv-4-address\" :' + '\"' + requestorAddress + '\"'\r",
																	"                   + \"}\"\r",
																	"                + \"},\"\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var reference;      // get the reference responseSchema\r",
																	"try {\r",
																	"\r",
																	"    reference = pm.collectionVariables.get(\"responseSchema\");\r",
																	"\r",
																	"} catch(error){\r",
																	"    logger.error(\"! Input data could not be loaded.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseObject = {};\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"\r",
																	"    } else {\r",
																	"        responseObject = {}\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"\r",
																	"    let assertionName;\r",
																	"    let result;\r",
																	"    let failureReason;\r",
																	"\r",
																	"\r",
																	"    if (Math.floor(responseCode/100)===2) {\r",
																	"        let validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
																	"\r",
																	"        logger.log(\"Reference Schema:\");\r",
																	"        logger.log(reference);\r",
																	"\r",
																	"        logger.log(\"Response:\");\r",
																	"        logger.log(responseObject);\r",
																	"\r",
																	"        logger.log(\"Validation Result:\");\r",
																	"        logger.log(validationResult);\r",
																	"\r",
																	"        pm.test(\"Response matches schema definition\", function () {\r",
																	"            pm.expect(validationResult.errors.length).to.equal(0)\r",
																	"        });\r",
																	"\r",
																	"    } else {\r",
																	"        logger.warn(\"Response could not be loaded.\");\r",
																	"        pm.test(\"Response could be loaded\", function () {\r",
																	"            pm.expect(false).to.be.true\r",
																	"        })\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! validation could not be completely executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid requestBody - 400",
											"item": [
												{
													"name": "Expected /v1/read-current-mac-table-from-device - missing required attribute in requestBody error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Missing required attribute in requestBody error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// all attributes below are required, omit requestor-address\r",
																	"// should also suffice to just send {}\r",
																	"// as address is the only difference between MATR and NEP input, a differentiation is not required\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"    requestBody = '{' \r",
																	"        + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"        + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"        //+ '\"requestor-address\": ' + requestorAddress + '\",'\r",
																	"        + '\"requestor-port\": ' + requestorPort + ','\r",
																	"        + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 400;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/read-current-mac-table-from-device - wrong attribute type error response (port)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Wrong attribute type in requestBody error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// port should be type integer, provide it as string\r",
																	"\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"\r",
																	"    // requestBody for NEP\r",
																	"    if (serverToBeApplied == \"nep\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + requestorAddress + '\",'\r",
																	"            + '\"requestor-port\": ' + '\"' + requestorPort + '\"' + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"    // requestBody for MATR with ip\r",
																	"    else if (serverToBeApplied == \"matr\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + '{'\r",
																	"                + '\"ip-address\": ' + '{'\r",
																	"                   + '\"ipv-4-address\" :' + '\"' + requestorAddress + '\"'\r",
																	"                   + \"}\"\r",
																	"                + \"},\"\r",
																	"            + '\"requestor-port\": ' + '\"' + requestorPort + '\"' + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});    \r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 400;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/read-current-mac-table-from-device - requestorAddress IP in wrong format error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Invalid requestorAddress (IP) in requestBody error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"// ip format must follow the correct pattern for ips, so provide a non matching string\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"\r",
																	"    // requestBody for NEP\r",
																	"    if (serverToBeApplied == \"nep\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + '\"xyz\",'\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"    // requestBody for MATR with ip\r",
																	"    else if (serverToBeApplied == \"matr\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + '{'\r",
																	"                + '\"ip-address\": ' + '{'\r",
																	"                   + '\"ipv-4-address\" :' + '\"xyz\"'\r",
																	"                   + \"}\"\r",
																	"                + \"},\"\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 400;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/read-current-mac-table-from-device - missing requestBody error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Missing in requestBody error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"    // read from loadFile\r",
																	"    var dummyMountName = pm.collectionVariables.get(\"dummyMountName\");\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 400;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Unknown device error response - 404",
											"item": [
												{
													"name": "Expected /v1/read-current-mac-table-from-device - unknown device error response",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"logger.struc(\"\\n----- \" + operationName + \" acceptance -- Unknown device error response -------------------------------\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"\r",
																	"    var serverToBeApplied = pm.environment.get(\"serverToBeApplied\");\r",
																	"\r",
																	"    // load parameters from loadFile\r",
																	"    var serverUrl = pm.environment.get(\"serverUrl\");\r",
																	"    var userName = pm.environment.get(\"userName\");\r",
																	"    var originator = pm.environment.get(\"originator\");\r",
																	"    var xCorrelator = pm.environment.get(\"xCorrelator\");\r",
																	"    var traceIndicator = pm.environment.get(\"traceIndicator\");\r",
																	"    var customerJourney = pm.environment.get(\"customerJourney\");\r",
																	"    var authorizationCode = pm.environment.get(\"authorizationCode\");\r",
																	"\r",
																	"    // load from connectionVars\r",
																	"    var operationKey = pm.collectionVariables.get(\"operationKey\");\r",
																	"\r",
																	"\r",
																	"    // this will be the Netexplorer address info in real usage scenario\r",
																	"    var requestorProtocol = pm.collectionVariables.get(\"requestorProtocol\");\r",
																	"    var requestorAddress =  pm.collectionVariables.get(\"requestorAddress\");\r",
																	"    var requestorPort =  pm.collectionVariables.get(\"requestorPort\");\r",
																	"    var requestorReceiveOperation =  pm.collectionVariables.get(\"requestorReceiveOperation\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Environment/collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"    var dummyMountName = \"dummyMountName\";\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var requestBody;\r",
																	"try {\r",
																	"\r",
																	"    // requestBody for NEP\r",
																	"    if (serverToBeApplied == \"nep\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + requestorAddress + '\",'\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"    // requestBody for MATR with ip\r",
																	"    else if (serverToBeApplied == \"matr\"){\r",
																	"        requestBody = '{' \r",
																	"            + '\"mount-name\": ' + '\"' + dummyMountName + '\",'\r",
																	"            + '\"requestor-protocol\": ' + '\"' + requestorProtocol + '\",'\r",
																	"            + '\"requestor-address\": ' + '{'\r",
																	"                + '\"ip-address\": ' + '{'\r",
																	"                   + '\"ipv-4-address\" :' + '\"' + requestorAddress + '\"'\r",
																	"                   + \"}\"\r",
																	"                + \"},\"\r",
																	"            + '\"requestor-port\": ' + requestorPort + ','\r",
																	"            + '\"requestor-receive-operation\": ' + '\"' + requestorReceiveOperation  + '\"'                  \r",
																	"            + '}';\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"try {\r",
																	"    let URI = serverUrl + operationName;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", requestBody);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value: operationKey});\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value: authorizationCode});\r",
																	"    \r",
																	"    pm.request.headers.upsert({key:\"user\", value: userName});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value: originator});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value: xCorrelator});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value: traceIndicator});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value: customerJourney});\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
																	"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(error);\r",
																	"    logger.error(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var operationName = pm.environment.get(\"operationName\");\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining reference values\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"let expectedResponseCode = 404;\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"var responseCode;\r",
																	"var responseMessage;\r",
																	"try {\r",
																	"    let response = pm.response;\r",
																	"    let responseObject;\r",
																	"\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        responseObject = JSON.parse(response.stream)\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        responseMessage = responseObject.message;\r",
																	"\r",
																	"    } else {\r",
																	"        responseMessage = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! result could not be extracted.\")\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"// now do actual testing\r",
																	"try {\r",
																	"    let assertionName = \"POST \" + operationName + \" responds with expected responseCode (\" + expectedResponseCode + \")\";\r",
																	"\r",
																	"    pm.test(assertionName, function(){\r",
																	"        pm.expect(responseCode).to.equal(expectedResponseCode);\r",
																	"    });\r",
																	"\r",
																	"\r",
																	"} catch (error) {\r",
																	"    logger.error(\"! Testing could not be executed.\")\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Updating Environmental Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "404"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "Tests can only be run against NEP, but not against MATR\n\n- input parameters for service in NEP and MATR have differences\n    \n- different responseCodes in MATR and NEP"
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyUri;\r",
									"try {\r",
									"    dummyUri = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    // no processing required\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be processed.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri = dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Log levels ordered based on most to less verbose:\r",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:\r",
					"// debug -> log -> info -> warn -> error -> struc -> none\r",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts\r",
					"\r",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];\r",
					"\r",
					"const shouldLog = (level) => {\r",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));\r",
					"};\r",
					"\r",
					"logger = {\r",
					"  debug: (message, ...optionalParams) => {\r",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);\r",
					"  },\r",
					"  log: (message, ...optionalParams) => {\r",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);\r",
					"  },\r",
					"  info: (message, ...optionalParams) => {\r",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);\r",
					"  },\r",
					"  warn: (message, ...optionalParams) => {\r",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);\r",
					"  },\r",
					"  error: (message, ...optionalParams) => {\r",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);\r",
					"  },\r",
					"  struc: (message, ...optionalParams) => {\r",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);\r",
					"  },\r",
					"};\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}